import java.text.SimpleDateFormat

buildscript {
    apply from: "../dependencies.gradle"
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath deps.build.gradleMavenPublish
        classpath deps.build.errorpronePlugin
        classpath deps.build.rockerPlugin
    }
}

apply plugin: "com.fizzed.rocker"
apply plugin: "net.ltgt.errorprone"

apply plugin: "com.vanniktech.maven.publish"
apply from: "../dependencies.gradle"

repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
}

jar {
    exclude("**/*.rocker.raw")
}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

sourceSets.main.java.srcDirs = ["src/main/rocker", "src/main/java"]
sourceSets.main.rocker.srcDirs = ["src/main/rocker", "src/main/java"]

dependencies {
    annotationProcessor deps.apt.autoValue
    annotationProcessor deps.build.nullaway

    testAnnotationProcessor deps.build.nullaway

    errorprone deps.build.erroproneCompiler
    errorproneJavac deps.build.errorproneJavac

    compileOnly deps.external.inferAnnotations
    compileOnly deps.apt.autoValueAnnotations
    compileOnly deps.external.annotationApi

    implementation gradleApi()

    implementation deps.build.androidPlugin
    implementation deps.build.commonsIo
    implementation deps.build.commonsLang3
    implementation deps.build.kotlinAllOpen
    implementation deps.build.kotlinPlugin
    implementation deps.build.mavenArtifact
    implementation deps.build.rockerRuntime
    implementation deps.external.guava
    implementation deps.external.gson

    testImplementation deps.test.junit
    testImplementation deps.test.mockito
}

rocker {
    discardLogicWhitespace true
    optimize true
    extendsClass "com.uber.okbuck.template.core.RuleTemplate"
    extendsModelClass "com.uber.okbuck.template.core.Rule"
    markAsGenerated true
}

tasks.withType(JavaCompile) {
    options.errorprone {
      allDisabledChecksAsWarnings = true
      disableWarningsInGeneratedCode = true

      option("NullAway:AnnotatedPackages", "com.uber")
      option("NullAway:TreatGeneratedAsUnannotated", "true")

      error("NullAway")

      disable("MissingSummary")
      disable("BooleanParameter")
      disable("FieldCanBeFinal")
      disable("RemoveUnusedImports")
      disable("AndroidJdkLibsChecker")
      disable("Java7ApiChecker")

      warn("ConstantField")
      warn("MixedArrayDimensions")
      warn("MultipleTopLevelClasses")
      warn("MultiVariableDeclaration")
      warn("PackageLocation")
      warn("ThrowsUncheckedException")
      warn("UnnecessaryStaticImport")
      warn("WildcardImport")
    }
    options.compilerArgs += [
        "-Werror"
    ]
}

tasks.withType(com.fizzed.rocker.gradle.RockerTask).each { task ->
  task.doLast {
    def tree = fileTree(dir: task.outputDir, include: '**/*.java')
    tree.each { file ->
      file.text = file.text.replace("@com.fizzed.rocker.Generated", '@javax.annotation.Generated("Rocker")')
    }
  }
}
