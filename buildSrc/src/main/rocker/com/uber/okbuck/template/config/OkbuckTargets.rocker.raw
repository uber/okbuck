@import java.util.Collection
@args (
Collection resourceExcludes,
String classpathMacro,
String lintJvmArgs,
String externalDependencyCache,
String jetifierConfigurationTarget,
boolean enableLint,
boolean useCompilationClasspath,
String classpathExclusionRegex
)

# 3 methods below are copied from https://github.com/bazelbuild/bazel-skylib
# this is the minimal subset needed for defs to work in SKYLARK
def _basename(path):
    return path.rpartition("/")[-1]

def _dirname(path):
    prefix, sep, _ = path.rpartition("/")
    if not prefix:
        return sep
    else:
        return prefix.rstrip("/")

def _paths_join(prefix, suffix):
    result = prefix
    if not prefix or prefix.endswith("/"):
        result += suffix
    else:
        result += "/" + suffix
    return result

def merge_maps(**res_maps):
    result = {}
    for path, res_map in res_maps.items():
        for key in res_map:
            if key in result and result[key] != res_map[key]:
                dir_name = _dirname(key)
                base_name = _basename(key)
                new_key = "/".join([dir_name, path.replace("/", "_") + "_" + base_name])
                result[new_key] = res_map[key]
            else:
                result[key] = res_map[key]

    return result

# subdir_glob no longer supported in SKYLARK
# using https://github.com/facebook/buck/issues/1963
def subdir_glob(glob_specs, exclude = None, prefix = ""):
    if exclude == None:
        exclude = []

    results = []

    for dirpath, glob_pattern in glob_specs:
        results.append(
            _single_subdir_glob(dirpath, glob_pattern, exclude, prefix),
        )

    return _merge_maps(*results)

def _merge_maps(*file_maps):
    result = {}
    for file_map in file_maps:
        for key in file_map:
            if key in result and result[key] != file_map[key]:
                fail(
                    "Conflicting files in file search paths. " +
                    "\"%s\" maps to both \"%s\" and \"%s\"." %
                    (key, result[key], file_map[key]),
                )

            result[key] = file_map[key]

    return result

def _single_subdir_glob(dirpath, glob_pattern, exclude = None, prefix = None):
    if exclude == None:
        exclude = []
    results = {}
    files = native.glob([_paths_join(dirpath, glob_pattern)], exclude = exclude)
    for f in files:
        if dirpath:
            key = f[len(dirpath) + 1:]
        else:
            key = f
        if prefix:
            key = _paths_join(prefix, key)
        results[key] = f

    return results

def res_glob(glob_specs):
    """
    Given a list of tuples, the form of (relative-sub-directory, glob-pattern),
    return a dict of sub-directory relative paths to full paths. Useful for
    defining res/asset globs of android_resource rules. This automatically handles
    path name conflicts by prefixing such keys with the parent dir path.
    """
    results = {}

    for dirpath, glob_pattern in glob_specs:
        results[dirpath] = subdir_glob(
            [(dirpath, glob_pattern)],
            exclude = [@(String.join(",", resourceExcludes))],
        )

    return merge_maps(**results)

def okbuck_aidl(
        name,
        aidls,
        imports,
        manifest = None,
        deps = []):
    gen = []
    for aidl_file in native.glob(["{}/**/*.aidl".format(aidls)]):
        rule_name = "{}__".format(name) + _basename(aidl_file).replace(".aidl", "")
        gen.append(":" + rule_name)
        native.gen_aidl(
            name = rule_name,
            aidl = aidl_file,
            import_path = imports,
        )

    native.android_library(
        name = name,
        srcs = gen,
        manifest = manifest,
        deps = deps,
    )

def toLocation(dep):
    return "$(location {})".format(dep)

def okbuck_lint(
        variant,
        manifest,
        srcs,
        res_dirs,
        aar_deps,
        custom_lints,
        lint_options,
        lib):
    name = "lint_{}".format(variant)

    has_srcs = len(srcs) > 0

    # Buck does not include the underlying library as part of the rule key, but Bazel does.
    # The following is just to add the lib as a rule key to the Buck rule so both are invalidated
    # when the underlying lib is invalidated.
    cmd = "echo $(classpath {}) >> /dev/null ; ".format(lib)

    cmd += 'AAR_DEPS="{}"; '.format(";".join([toLocation(aar_dep + "#aar_unzip") for aar_dep in aar_deps]))

    cmd += 'for aar in ${AAR_DEPS//;/ }; do if [[ -e $aar/lint.jar ]]; then PREBUILT_AAR_LINT_JARS="$aar/lint.jar:$PREBUILT_AAR_LINT_JARS"; fi ; done; '

    cmd += "export ANDROID_LINT_JARS=\"$PREBUILT_AAR_LINT_JARS{}\"; PROJECT_ROOT=`echo '{}' | sed 's|buck-out.*||'`; ".format(":".join([toLocation(custom_lint) for custom_lint in custom_lints]), toLocation(manifest))

    cmd += "CP_FILE=`mktemp --tmpdir=$TMP`; "
    if has_srcs:
        cmd += "ORIGINAL_CP_FILE=`sed 's/@@//' <<< $(@@@(classpathMacro) :src_{})`; ".format(variant)
@if(classpathExclusionRegex != null) {
        cmd += "TMP_CP_FILE=`mktemp --tmpdir=$TMP`; "
        cmd += "tr ':' '\\n' < $ORIGINAL_CP_FILE | sed -e '/@classpathExclusionRegex/d' > $TMP_CP_FILE; tr '\\n' ':' < $TMP_CP_FILE > $CP_FILE; "
        cmd += "rm $TMP_CP_FILE; "
} else {
        cmd += "cp $ORIGINAL_CP_FILE $CP_FILE; "
}
        cmd += 'sed -i.bak -e "s|$PROJECT_ROOT||g" -e "s|\'||g" $CP_FILE; '

    cmd += "mkdir -p $OUT; LOGFILE=$OUT/lint.log; trap \"rv=\\$?; if [ \\$rv != 0 ] ; then cat $LOGFILE 1>&2 ; fi ; rm -f $LOGFILE; exit $rv\" EXIT;  java -Djava.awt.headless=true -Dcom.android.tools.lint.workdir=$PROJECT_ROOT "
    cmd += "@lintJvmArgs "
    cmd += "-classpath {} com.uber.okbuck.android.lint.AndroidLintCli ".format(toLocation("//.okbuck/workspace/lint:okbuck_lint"))

    if has_srcs:
@if(useCompilationClasspath) {
        cmd += "--classpath $(location :src_{}) ".format(variant)
} else {
        cmd += "--classpath $(location //.okbuck/workspace/lint:lint-dummy.jar) "
}
        cmd += '--libraries "$CP_FILE" '

    for src in srcs:
        cmd += "--sources {}/{} ".format(native.package_name(), src)

    for res_dir in res_dirs:
        cmd += "--resources {}/{} ".format(native.package_name(), res_dir)

    # Implicit options
    cmd += '--xml "$OUT/lint-results.xml" '
    cmd += '--html "$OUT/lint-results.html" '
    cmd += "--fullpath "

    cmd += "{} `dirname {}` >$LOGFILE 2>/dev/null; ".format(" ".join(lint_options), toLocation(manifest))

    #Delete tmp file and tmp.bak file
    cmd += "rm $CP_FILE*; "

    native.genrule(
        name = name,
        srcs = srcs + res_dirs,
        out = "{}_out".format(name),
        type = "okbuck_lint",
        cmd = cmd,
    )

def shellquote(s):
    return "'" + s.replace("'", "'\\''") + "'"

def okbuck_manifest(
        name,
        main_manifest,
        min_sdk,
        target_sdk,
        package = None,
        version_code = None,
        version_name = None,
        debuggable = False,
        secondary_manifests = None,
        visibility = []):
    if not secondary_manifests:
        secondary_manifests = []

    cmds = []
    cmds.append("java -jar -Xmx256m $(location //.okbuck/workspace/manifest-merger:okbuck_manifest_merger)")
    cmds.append("--main $SRCDIR/{}".format(main_manifest))
    if len(secondary_manifests) > 0:
        for secondary_manifest in secondary_manifests:
            cmds.append("--overlays {}".format("$SRCDIR/" + secondary_manifest))
    cmds.append("--property MIN_SDK_VERSION={}".format(min_sdk))
    cmds.append("--property TARGET_SDK_VERSION={}".format(target_sdk))
    if package:
        cmds.append("--property PACKAGE={}".format(package))
    if version_code:
        cmds.append("--property VERSION_CODE={}".format(version_code))
    if version_name:
        cmds.append("--property VERSION_NAME={}".format(version_name))
    if debuggable:
        cmds.append("--debuggable true")
    else:
        cmds.append("--debuggable false")
    cmds.append("--out $OUT")

    native.genrule(
        name = name,
        srcs = [main_manifest] + secondary_manifests,
        out = "AndroidManifest.xml",
        type = "okbuck_manifest",
        cmd = " ".join(cmds),
        visibility = visibility,
    )

def isLintEnabled(manifest):
@if(enableLint) {
    return manifest != None
} else {
    return False
}

def okbuck_android_library(
        name,
        manifest = None,
        deps = None,
        lint_src_dirs = None,
        lint_res_dirs = None,
        disable_lint = False,
        custom_lints = None,
        lint_options = None,
        **kwargs):
    if not deps:
        deps = []
    if not lint_src_dirs:
        lint_src_dirs = []
    if not lint_res_dirs:
        lint_res_dirs = []
    if not custom_lints:
        custom_lints = []
    if not lint_options:
        lint_options = []

    native.android_library(
        name = name,
        manifest = manifest,
        deps = deps,
        **kwargs
    )

    if not disable_lint and isLintEnabled(manifest):
        aar_deps = []
        for dep in deps:
            if dep.startswith("//@externalDependencyCache/") and dep.endswith(".aar"):
                aar_deps.append(dep)

        variant = name.replace("src_", "", 1)
        okbuck_lint(
            variant = variant,
            manifest = manifest,
            srcs = lint_src_dirs,
            res_dirs = lint_res_dirs,
            aar_deps = aar_deps,
            custom_lints = custom_lints,
            lint_options = lint_options,
            lib = ":" + name,
        )

def okbuck_keystore(
        name,
        storeFile,
        storePassword,
        keyAlias,
        keyPassword):
    properties_rule = name + "_properties"
    native.genrule(
        name = properties_rule,
        out = "keystore.properties",
        type = "okbuck_keystore",
        cmd = 'printf "key.alias={}\\nkey.store.password={}\\nkey.alias.password={}\\n" > $OUT'.format(keyAlias, storePassword, keyPassword),
    )

    native.keystore(
        name = name,
        store = storeFile,
        properties = ":" + properties_rule,
        visibility = ["PUBLIC"],
    )

def okbuck_android_prebuilt_aar(
        name,
        aar,
        enable_jetifier = False,
        **kwargs):
    aar_path = aar
    if enable_jetifier:
        jetified = name.replace(".aar", "-jetified.aar")
        genname = "unjetified_" + name
        aar_path = ":{}".format(genname)
        native.genrule(
            name = genname,
            srcs = [aar],
            out = jetified,
            cmd = "$(exe //.okbuck/workspace/jetifier:okbuck_jetifier) -i $SRCS -o $OUT@if(valid(jetifierConfigurationTarget)){ -c $(location @jetifierConfigurationTarget)}",
        )

    native.android_prebuilt_aar(
        name = name,
        aar = aar_path,
        **kwargs
    )

def okbuck_prebuilt_jar(
        name,
        binary_jar,
        enable_jetifier = False,
        **kwargs):
    jar_path = binary_jar
    if enable_jetifier:
        jetified = name.replace(".jar", "-jetified.jar")
        genname = "unjetified_" + name
        jar_path = ":{}".format(genname)
        native.genrule(
            name = genname,
            srcs = [binary_jar],
            out = jetified,
            cmd = "$(exe //.okbuck/workspace/jetifier:okbuck_jetifier) -i $SRCS -o $OUT@if(valid(jetifierConfigurationTarget)){ -c $(location @jetifierConfigurationTarget)}",
        )

    native.prebuilt_jar(
        name = name,
        binary_jar = jar_path,
        **kwargs
    )

def okbuck_java_integration_test(**kwargs):
    native.java_test(**kwargs)

def okbuck_scala_integration_test(**kwargs):
    native.scala_test(**kwargs)

def okbuck_kotlin_integration_test(**kwargs):
    native.kotlin_test(**kwargs)

def okbuck_groovy_integration_test(**kwargs):
    native.groovy_test(**kwargs)
